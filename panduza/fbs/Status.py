# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Status(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Status()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStatus(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Status
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Status
    def Instances(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .InstanceStatus import InstanceStatus
            obj = InstanceStatus()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Status
    def InstancesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Status
    def InstancesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # Status
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from Timestamp import Timestamp
            obj = Timestamp()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def StatusStart(builder):
    builder.StartObject(2)

def Start(builder):
    StatusStart(builder)

def StatusAddInstances(builder, instances):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(instances), 0)

def AddInstances(builder, instances):
    StatusAddInstances(builder, instances)

def StatusStartInstancesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartInstancesVector(builder, numElems):
    return StatusStartInstancesVector(builder, numElems)

def StatusAddTimestamp(builder, timestamp):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(timestamp), 0)

def AddTimestamp(builder, timestamp):
    StatusAddTimestamp(builder, timestamp)

def StatusEnd(builder):
    return builder.EndObject()

def End(builder):
    return StatusEnd(builder)
