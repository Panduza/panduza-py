# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VectorF32(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VectorF32()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVectorF32(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VectorF32
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VectorF32
    def Values(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # VectorF32
    def ValuesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # VectorF32
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VectorF32
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # VectorF32
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from Timestamp import Timestamp
            obj = Timestamp()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def VectorF32Start(builder):
    builder.StartObject(2)

def Start(builder):
    VectorF32Start(builder)

def VectorF32AddValues(builder, values):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)

def AddValues(builder, values):
    VectorF32AddValues(builder, values)

def VectorF32StartValuesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartValuesVector(builder, numElems):
    return VectorF32StartValuesVector(builder, numElems)

def VectorF32AddTimestamp(builder, timestamp):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(timestamp), 0)

def AddTimestamp(builder, timestamp):
    VectorF32AddTimestamp(builder, timestamp)

def VectorF32End(builder):
    return builder.EndObject()

def End(builder):
    return VectorF32End(builder)
