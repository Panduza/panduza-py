import logging
from behave import *
from panduza import Reactor

@given('a reactor connected on a test platform')
def step_given(context):
    reactor = Reactor()
    reactor.start()
    context.r = reactor

    context.platform_status = context.r.new_status_attribute()
    context.platform_status.wait_for_all_instances_to_be_running()

# ---

@given('a reactor trying to connect to an invalid platform')
def step_impl(context):
    raise NotImplementedError

# ---

@then('the status attribute must indicate an error for one instance')
def step_then(context):
    # This was autogenerated using Cucumber Expressions syntax.
    # Please convert to use Regular Expressions, as Behave does not currently support Cucumber Expressions.
    raise NotImplementedError

# ---

@then('the status attribute must indicate running for all instances')
def step_then(context):
    # This was autogenerated using Cucumber Expressions syntax.
    # Please convert to use Regular Expressions, as Behave does not currently support Cucumber Expressions.
    raise NotImplementedError

# ---

@then('the notification attribute must indicate no alert')
def step_then(context):
    # This was autogenerated using Cucumber Expressions syntax.
    # Please convert to use Regular Expressions, as Behave does not currently support Cucumber Expressions.
    raise NotImplementedError

# ---

@then('the notification attribute must indicate an alert for this instance')
def step_then(context):
    # This was autogenerated using Cucumber Expressions syntax.
    # Please convert to use Regular Expressions, as Behave does not currently support Cucumber Expressions.
    raise NotImplementedError