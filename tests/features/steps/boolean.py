from behave import *
from panduza import BooleanAttribute

@given('the boolean attribute rw {string}')
def step_given(context, string):

    string = string.strip('"')
    
    att = context.r.find(string)
    assert(type(att) is BooleanAttribute)
    context.boolean_att_rw = att

@given('the boolean attribute wo {string}')
def step_given(context, string):
    # This was autogenerated using Cucumber Expressions syntax.
    # Please convert to use Regular Expressions, as Behave does not currently support Cucumber Expressions.
    raise NotImplementedError("Step definition not implemented.")

@given('the boolean attribute ro {string}')
def step_given(context, string):
    # This was autogenerated using Cucumber Expressions syntax.
    # Please convert to use Regular Expressions, as Behave does not currently support Cucumber Expressions.
    raise NotImplementedError("Step definition not implemented.")

use_step_matcher("re")
@when('I set rw boolean to (true|false)')
def step_when(context, value):
    raise NotImplementedError("Step definition not implemented.")

@when('I set wo boolean to (true|false)')
def step_when(context, value):
    raise NotImplementedError("Step definition not implemented.")

@then('the rw boolean value is (true|false)')
def step_then(context, value):
    # This was autogenerated using Cucumber Expressions syntax.
    # Please convert to use Regular Expressions, as Behave does not currently support Cucumber Expressions.
    raise NotImplementedError("Step definition not implemented.")

@then('the ro boolean value is (true|false)')
def step_then(context, value):
    # This was autogenerated using Cucumber Expressions syntax.
    # Please convert to use Regular Expressions, as Behave does not currently support Cucumber Expressions.
    raise NotImplementedError("Step definition not implemented.")
